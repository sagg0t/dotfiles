unbind C-b
set -g prefix C-a
bind C-a send-prefix

set -g default-terminal "tmux-256color"
# set -g default-terminal "xterm-256color"
set -ga terminal-overrides ',*256color:Tc'
set -ga terminal-features ',*256color:Tc'

set -g allow-passthrough on

# Increase from 2000
set -g history-limit 10000
# Don't wait for an escape sequence after seeing a prefix
set -sg escape-time 0
# Display messages for 4s instead of 750ms
set -g display-time 3000
# Refresh 'status-left' and 'status-right' more often, from every 15s to 5s
set -g status-interval 5
# Dynamically update iTerm tab and window titles.
set -g set-titles on
# # Needed as on tmux 1.9 and up (defaults to off).
# # Added in tmux commit c7a121cfc0137c907b7bfb.
set -g focus-events on
# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set -g renumber-windows on
set -w -g xterm-keys on
# Slightly more useful width in "main-vertical" layout; enough room for 3-digit
# line number gutter in Vim + 80 columns of text + 1 column
# breathing room (default looks to be about 79).
set -w -g main-pane-width 85
# Start window and pane numbering at 1, (0 is too hard to reach).
# set -g base-index 1
# set -g pane-base-index 1
# But don't change tmux's own window titles.
set -w -g automatic-rename off
# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set -w -g wrap-search off
# Show bells in window titles.
set -g window-status-bell-style fg=yellow,bold,underscore
# Add : to the default list (" -_@") of word separators.
set -ga word-separators :/


# Vim-like key bindings for pane navigation (default uses cursor keys).
unbind h
bind h select-pane -L
unbind j
bind j select-pane -D
unbind k
bind k select-pane -U
unbind l # normally used for last-window
bind l select-pane -R
# Fast toggle between current and last-used pane
# unbind w
# bind w last-pane

# Resizing (mouse also works).
unbind Left
bind -r H resize-pane -L 5
unbind Right
bind -r L resize-pane -R 5
unbind Down
bind -r J resize-pane -D 5
unbind Up
bind -r K resize-pane -U 5



# Open new/split panes with the path of the current pane.
unbind c
bind c new-window -c '#{pane_current_path}'
unbind %
bind % split-window -h -c '#{pane_current_path}'
unbind '"'
bind '"' split-window -v -c '#{pane_current_path}'
# Fast toggle between current and last-used window (normally prefix-l).
# unbind w
# bind w last-window

# Intuitive window-splitting keys.
# bind | split-window -h -c '#{pane_current_path}' # normally prefix-%
# bind '\' split-window -h -c '#{pane_current_path}' # normally prefix-%
# bind - split-window -v -c '#{pane_current_path}' # normally prefix-"

bind -r '<' swap-window -d -t '{previous}' # Move window left.
bind -r '>' swap-window -d -t '{next}' # Move window right.



set -g mouse on

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
bind -T copy-mode-vi WheelUpPane select-pane\; send -t'{mouse}' -X -N 3 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane\; send -t'{mouse}' -X -N 3 scroll-down

# # Stay in copy mode on drag end.
# # (Would use `bind -T copy-mode-vi MouseDragEnd1Pane send -X
# # stop-selection` but it is a bit glitchy.)
# bind -T copy-mode-vi MouseDragEnd1Pane send -X
unbind -T copy-mode-vi MouseDragEnd1Pane

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send -M" "copy-mode -t'{mouse}'; send -t'{mouse}' -X select-word"
bind -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send -M" "copy-mode -t'{mouse}'; send -t'{mouse}' -X select-line"

# Don't exit copy mode on double or triple click.
bind -T copy-mode-vi DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send -M" "copy-mode -t'{mouse}'; send -t'{mouse}' -X select-word"
bind -T copy-mode-vi TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send -M" "copy-mode -t'{mouse}'; send -t'{mouse}' -X select-line"

# For those times when C-c and q are not enough.
bind -T copy-mode-vi Escape send -X cancel





# `^space ^space` is awfully close to the destructive `^space space`, which
# trashes the layout. Providea quick way to get back to the previous-used
# layout.
#
# Normally used for previous-window, but I never use that, prefering numeric
# access.
# bind p select-layout -o

# # Status bar.
# set -g status-style "bg=#090909,fg=#f6fade,bold"
# # set -g status-left-length 40
# set -g status-left ""
# set -g status-right "#[fg=#00bfa4,bold,italics]∆ #S "
# # set -g status-interval 60 # Default is 15.
# set -g pane-border-style "fg=#f92672"
# set -g pane-active-border-style "fg=#00bfa4"
#
# # Highlight active window.
# set -g window-status-current-style "fg=#f92672"
#
# set -g mode-style "fg=#000000,bg=#00bfa4"
# set -g message-style "fg=#9c75f0,bold"
# set -g message-command-style "fg=black,bold"

# Make widths constant with or without flags.
set -w -g window-status-current-format ' #I:#W#F '
set -w -g window-status-format ' #I:#W#{?#{==:#F,},  ,#F }'


# # catppuccin
# set -g status-right "#[fg=blue,bold,bg=#1e1e2e]∆ #S "
# # set -g status-right "#[fg=#b4befe,bold,bg=#1e1e2e]#S"
# set -g status-justify left
# set -g status-left-length 200    # increase length (from 10)
# set -g status-right-length 200    # increase length (from 10)
# set -g status-position top       # macOS / darwin style
# set -g status-style 'bg=#1e1e2e' # transparent
# set -g window-status-current-format '#[fg=magenta,bg=#1e1e2e]  #I #W'
# set -g window-status-format '#[fg=gray,bg=#1e1e2e] #I #W'
# set -g window-status-last-style 'fg=white,bg=black'
# set -g default-terminal "${TERM}"
# set -g message-command-style bg=default,fg=yellow
# set -g message-style bg=default,fg=yellow
# set -g mode-style bg=default,fg=yellow
# setw -g mode-keys vi
# set -g pane-active-border-style 'fg=magenta,bg=default'
# set -g pane-border-style 'fg=brightblack,bg=default'

# thm_base="#191724";
# thm_surface="#1f1d2e";
# thm_overlay="#26233a";
# thm_muted="#6e6a86";
# thm_subtle="#908caa";
# thm_text="#e0def4";
# thm_love="#eb6f92";
# thm_gold="#f6c177";
# thm_rose="#ebbcba";
# thm_pine="#31748f";
# thm_foam="#9ccfd8";
# thm_iris="#c4a7e7";
# thm_hl_low="#21202e";
# thm_hl_med="#403d52";
# thm_hl_high="#524f67";

# # rose-pine
# set -g status-left ""
# set -g status-right "#[fg=#31748f,bold,bg=#191724]∆ #S "
# # set -g status-right "#[fg=#b4befe,bold,bg=#1e1e2e]#S"
# set -g status-justify left
# set -g status-left-length 200    # increase length (from 10)
# set -g status-right-length 200    # increase length (from 10)
# set -g status-position top       # macOS / darwin style
# set -g status-style "bg=#191724" # transparent
# set -g window-status-current-format "#[fg=#eb6f92,bg=#191724]  #I #W"
# set -g window-status-format "#[fg=#ebbcba,bg=#191724] #I #W"
# set -g window-status-last-style "fg=white,bg=black"
# set -g default-terminal "${TERM}"
# set -g message-command-style bg=default,fg=yellow
# set -g message-style bg=default,fg=yellow
# set -g mode-style bg=default,fg=yellow
# setw -g mode-keys vi
# set -g pane-active-border-style 'fg=magenta,bg=default'

# gruvbox
set -g status-left ""
set -g status-right "#[fg=cyan,bold,bg=black]∆ #S "
set -g status-justify left
set -g status-left-length 200   # increase length (from 10)
set -g status-right-length 200  # increase length (from 10)
set -g status-position top      # macOS / darwin style
set -g status-style "bg=black"  # transparent
set -g window-status-current-format "#[fg=red,bg=black]  #I #W"
set -g window-status-format "#[fg=magenta,bg=black] #I #W"
set -g window-status-last-style "fg=white,bg=black"
# set -g default-terminal "${TERM}"
set -g message-command-style bg=default,fg=yellow
set -g message-style bg=default,fg=yellow
set -g mode-style bg=default,fg=yellow
setw -g mode-keys vi
set -g pane-active-border-style 'fg=magenta,bg=default'
set -g pane-border-style 'fg=brightblack,bg=default'
set -g pane-border-style 'fg=brightblack,bg=default'

# # Make sure we always start at 1, even when invoked from a .tmux wrapper script.
# set-environment -g SHLVL 1

# # Clipper.
bind y run-shell "tmux save-buffer - | clip"

# # "copy-pipe" requires tmux >= 1.8
bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "clip"

# # Search back to last prompt (mnemonic: "[b]ack").
# bind b copy-mode\; send -X start-of-line\; send -X search-backward "❯"\; send -X next-word

# bind -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
# bind -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""

# # Analagous with naked C-l which resets/clears the terminal.
bind C-l clear-history
bind R source-file ~/.config/tmux/tmux.conf \; display-message "tmux configuration reloaded"
bind M split-window -h "nvim ~/.config/tmux/tmux.conf"
bind f popup -E "~/.local/bin/hot-paths"
